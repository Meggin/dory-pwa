{"version":3,"sources":["main.js"],"names":["writeNewQuestion","uid","username","title","questionBody","questionData","author","starCount","newQuestionKey","firebase","database","ref","child","push","key","updates","update","toggleStar","questionRef","transaction","question","stars","createQuestionElement","questionId","authorId","auth","currentUser","html","div","document","createElement","innerHTML","questionElement","firstChild","star","getElementsByClassName","unStar","viewAnswers","innerText","starCountRef","on","snapshot","updateStarCount","val","starredStatusRef","updateStarredByCurrentUser","listeningFirebaseRefs","onStarClicked","globalQuestionRef","userQuestionRef","onAnswersClicked","showAnswers","questionCommentsSection","onclick","createAnswerElement","id","answer","answerElement","starred","style","display","nbStart","startDatabaseQueries","myUserId","recentQuestionsRef","orderByChild","userQuestionsRef","fetchQuestions","questionsRef","sectionElement","data","containerElement","insertBefore","allQuestionsSection","userQuestionsSection","loadAndDisplayAnswers","answersRef","fetchAnswers","inAnswersRef","answersContainer","off","writeUserData","userId","name","email","imageUrl","set","cleanupUi","forEach","onAuthStateChanged","user","currentUID","splashPage","displayName","newQuestionForCurrentUser","once","then","createNewAnswer","showSection","buttonElement","addQuestion","questionsMenuButton","classList","remove","myQuestionsMenuButton","add","getElementById","value","isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","console","error","questionForm","questionDescriptionInput","questionTitleInput","answerForm","answerInput","signInButton","signOutButton","addButton","addEventListener","provider","GoogleAuthProvider","signInWithPopup","signOut","onsubmit","preventDefault","click"],"mappings":"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","file":"main.min.js","sourcesContent":["/*!\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Shortcuts to DOM Elements.\nvar questionForm = document.getElementById('question-form');\nvar questionDescriptionInput = document.getElementById('new-question-description');\nvar questionTitleInput = document.getElementById('new-question-title');\nvar answerForm = document.getElementById('add-answer');\nvar answerInput = document.getElementById('answer-input');\nvar signInButton = document.getElementById('sign-in-button');\nvar signOutButton = document.getElementById('sign-out-button');\nvar splashPage = document.getElementById('page-splash');\nvar addQuestion = document.getElementById('add-question');\nvar addButton = document.getElementById('add');\nvar allQuestionsSection = document.getElementById('all-questions-list');\nvar userQuestionsSection = document.getElementById('user-questions-list');\nvar questionCommentsSection = document.getElementById('question-comments-list');\nvar questionsMenuButton = document.getElementById('menu-questions');\nvar myQuestionsMenuButton = document.getElementById('menu-my-questions');\nvar listeningFirebaseRefs = [];\n\n/**\n * Saves a new question to the Firebase DB.\n * Responsible for how data is structured in database.\n */\nfunction writeNewQuestion(uid, username, title, questionBody) {\n  // A question entry.\n  var questionData = {\n    author: username,\n    uid: uid,\n    questionBody: questionBody,\n    title: title,\n    starCount: 0,\n  };\n\n  // Get a key for new question.\n  var newQuestionKey = firebase.database().ref().child('questions').push().key;\n\n  // Write the new question's data in questions and user-questions lists.\n  var updates = {};\n  updates['/questions/' + newQuestionKey] = questionData;\n  updates['/user-questions/' + uid + '/' + newQuestionKey] = questionData;\n\n  return firebase.database().ref().update(updates);\n}\n\n/**\n * Star/unstar question.\n */\nfunction toggleStar(questionRef, uid) {\n  questionRef.transaction(function(question) {\n    if (question) {\n      if (question.stars && question.stars[uid]) {\n        question.starCount--;\n        question.stars[uid] = null;\n      } else {\n        question.starCount++;\n        if (!question.stars) {\n          question.stars = {};\n        }\n        question.stars[uid] = true;\n      }\n    }\n    return question;\n  });\n}\n\n/**\n * Creates a question element.\n */\nfunction createQuestionElement(questionId, title, questionBody, author, authorId) {\n  var uid = firebase.auth().currentUser.uid;\n\n  var html =\n      '<li class=\"question\">' +\n        '<div>' +\n          '<h4 class=\"title\"></h4>' +\n          '<div class=\"username mdl-color-text--black\"></div>' +\n          '<div class=\"key mdl-color-text--black\"></div>' +\n          '<span class=\"star\">' +\n            '<div class=\"not-starred material-icons\">star_border</div>' +\n            '<div class=\"starred material-icons\">star</div>' +\n            '<div class=\"star-count\">0</div>' +\n          '</span>' +\n          '<div class=\"questionBody\"></div>' +\n          '<button class=\"comments mdl-button mdl-js-button mdl-button--icon\">' +\n             '<i class=\"material-icons\">comment</i>' + \n          '</button>' +\n        '</div>' +\n      '</li>';\n\n  // Create the DOM element from the HTML.\n  var div = document.createElement('div');\n  div.innerHTML = html;\n  var questionElement = div.firstChild;\n\n  var star = questionElement.getElementsByClassName('starred')[0];\n  var unStar = questionElement.getElementsByClassName('not-starred')[0];\n  var viewAnswers = questionElement.getElementsByClassName('comments')[0];\n\n  // Set values.\n  questionElement.getElementsByClassName('questionBody')[0].innerText = questionBody;\n  questionElement.getElementsByClassName('title')[0].innerText = title;\n  questionElement.getElementsByClassName('username')[0].innerText = author || 'Anonymous';\n  questionElement.getElementsByClassName('key')[0].innerText = questionId;\n\n  // Listen for likes counts.\n  // [START question_value_event_listener]\n  var starCountRef = firebase.database().ref('questions/' + questionId + '/starCount');\n  starCountRef.on('value', function(snapshot) {\n    updateStarCount(questionElement, snapshot.val());\n  });\n  // [END question_value_event_listener]\n\n  // Listen for the starred status.\n  var starredStatusRef = firebase.database().ref('questions/' + questionId + '/stars/' + uid)\n  starredStatusRef.on('value', function(snapshot) {\n    updateStarredByCurrentUser(questionElement, snapshot.val());\n  });\n\n  // Keep track of all Firebase reference on which we are listening.\n  listeningFirebaseRefs.push(starCountRef);\n  listeningFirebaseRefs.push(starredStatusRef);\n\n  // Bind starring action.\n  var onStarClicked = function() {\n    var globalQuestionRef = firebase.database().ref('/questions/' + questionId);\n    var userQuestionRef = firebase.database().ref('/user-questions/' + authorId + '/' + questionId);\n    toggleStar(globalQuestionRef, uid);\n    toggleStar(userQuestionRef, uid);\n  };\n\n  var onAnswersClicked = function() {\n    showAnswers(title, questionId, questionBody, questionCommentsSection);\n  }\n\n  unStar.onclick = onStarClicked;\n  star.onclick = onStarClicked;\n  viewAnswers.onclick = onAnswersClicked;\n\n  return questionElement;\n}\n\n/**\n * Creates answer element.\n */\nfunction createAnswerElement(questionId, id, answer, author) {\n  var uid = firebase.auth().currentUser.uid;\n\n  var html =\n      '<div class=\" answer mdl-card mdl-shadow--2dp\">' +\n        '<div class=\"header\">' +\n          '<div>' +\n            '<div class=\"username mdl-color-text--black\"></div>' +\n          '</div>' +\n          '<div class=\"key\"></div>' +\n        '</div>' +\n        '<div class=\"answer\"></div>' +\n      '</div>';\n\n  // Create the DOM element from the HTML.\n  var div = document.createElement('div');\n  div.innerHTML = html;\n  var answerElement = div.firstChild;\n\n  answerElement.getElementsByClassName('answer')[0].innerText = answer;\n  answerElement.getElementsByClassName('username')[0].innerText = author || 'Anonymous';\n  answerElement.getElementsByClassName('key')[0].innerText = questionId;\n\n  return answerElement;\n}\n\n/**\n * Updates the starred status of the question.\n */\nfunction updateStarredByCurrentUser(questionElement, starred) {\n  if (starred) {\n    questionElement.getElementsByClassName('starred')[0].style.display = 'inline-block';\n    questionElement.getElementsByClassName('not-starred')[0].style.display = 'none';\n  } else {\n    questionElement.getElementsByClassName('starred')[0].style.display = 'none';\n    questionElement.getElementsByClassName('not-starred')[0].style.display = 'inline-block';\n  }\n}\n\n/**\n * Updates the number of stars displayed for a question.\n */\nfunction updateStarCount(questionElement, nbStart) {\n  questionElement.getElementsByClassName('star-count')[0].innerText = nbStart;\n}\n\n/**\n * Starts listening for new questions and populates questions lists.\n */\nfunction startDatabaseQueries() {\n  var myUserId = firebase.auth().currentUser.uid;\n  var recentQuestionsRef = firebase.database().ref('questions').orderByChild('starCount');\n  var userQuestionsRef = firebase.database().ref('user-questions/' + myUserId).orderByChild('starCount');\n\n  var fetchQuestions = function(questionsRef, sectionElement) {\n    questionsRef.on('child_added', function(data) {\n      var author = data.val().author || 'Anonymous';\n      var containerElement = sectionElement.getElementsByClassName('questions-container')[0];\n      containerElement.insertBefore(\n          createQuestionElement(data.key, data.val().title, data.val().questionBody, author, data.val().uid),\n          containerElement.firstChild);\n    });\n  };\n\n  // Fetching and displaying all questions of each sections.\n  fetchQuestions(recentQuestionsRef, allQuestionsSection);\n  fetchQuestions(userQuestionsRef, userQuestionsSection);\n\n  // Keep track of all Firebase refs we are listening to.\n  listeningFirebaseRefs.push(recentQuestionsRef);\n  listeningFirebaseRefs.push(userQuestionsRef);\n}\n\nfunction loadAndDisplayAnswers(questionId) {\n\n  var answersRef = firebase.database().ref('question-answers/' + questionId);\n\n  var fetchAnswers = function(inAnswersRef, questionId, sectionElement) {\n      inAnswersRef.on('child_added', function(data) {\n      var author = data.val().author || 'Anonymous';\n      var answersContainer = questionCommentsSection.getElementsByClassName('answers-container')[0];\n      answersContainer.insertBefore(\n        createAnswerElement(questionId, data.val().id, data.val().answer, data.val().author),\n        answersContainer.firstChild);\n    });\n  };\n\n  fetchAnswers(answersRef, questionId, questionCommentsSection);\n\n  listeningFirebaseRefs.push(answersRef);\n  answersRef.off('child_added');\n\n}\n\n\n/**\n * Writes the user's data to the database.\n */\n// [START basic_write]\nfunction writeUserData(userId, name, email, imageUrl) {\n  firebase.database().ref('users/' + userId).set({\n    username: name,\n    email: email\n  });\n}\n// [END basic_write]\n\n/**\n * Cleanups the UI and removes all Firebase listeners.\n */\nfunction cleanupUi() {\n  // Remove all previously displayed questions.\n  allQuestionsSection.getElementsByClassName('questions-container')[0].innerHTML = '';\n  userQuestionsSection.getElementsByClassName('questions-container')[0].innerHTML = '';\n\n  // Stop all currently listening Firebase listeners.\n  listeningFirebaseRefs.forEach(function(ref) {\n    ref.off();\n  });\n  listeningFirebaseRefs = [];\n}\n\n/**\n * The ID of the currently signed-in User. We keep track of this to detect Auth state change events that are just\n * programmatic token refresh but not a User status change.\n */\nvar currentUID;\n\n/**\n * Triggers every time there is a change in the Firebase auth state (i.e. user signed-in or user signed out).\n */\nfunction onAuthStateChanged(user) {\n  // We ignore token refresh events.\n  if (user && currentUID === user.uid || !user && currentUID === null) {\n    return;\n  }\n  currentUID = user ? user.uid : null;\n\n  cleanupUi();\n  if (user) {\n    splashPage.style.display = 'none';\n    writeUserData(user.uid, user.displayName, user.email);\n    startDatabaseQueries();\n  } else {\n    // Display the splash page where you can sign-in.\n    splashPage.style.display = '';\n  }\n}\n\n/**\n * Creates a new question for the current user.\n */\nfunction newQuestionForCurrentUser(title, questionBody) {\n  // [START single_value_read]\n  var userId = firebase.auth().currentUser.uid;\n  return firebase.database().ref('/users/' + userId).once('value').then(function(snapshot) {\n    var username = snapshot.val().username;\n    // [START_EXCLUDE]\n    return writeNewQuestion(firebase.auth().currentUser.uid, username,\n        title, questionBody);\n    // [END_EXCLUDE]\n  });\n  // [END single_value_read]\n}\n\n/**\n * Writes a new answer for the given question.\n */\nfunction createNewAnswer(questionId, answer, username) {\n  firebase.database().ref('question-answers/' + questionId).push({\n    answer: answer,\n    author: username,\n  });\n}\n\n\n/**\n * Displays the given section element and changes styling of the given button.\n */\nfunction showSection(sectionElement, buttonElement) {\n  allQuestionsSection.style.display = 'none';\n  userQuestionsSection.style.display = 'none';\n  addQuestion.style.display = 'none';\n  questionCommentsSection.style.display = 'none';\n  questionsMenuButton.classList.remove('is-active');\n  myQuestionsMenuButton.classList.remove('is-active');\n\n  if (sectionElement) {\n    sectionElement.style.display = 'block';\n  }\n  if (buttonElement) {\n    buttonElement.classList.add('is-active');\n  }\n}\n\n/**\n * Displays the given section element and changes styling of the given button.\n */\nfunction showAnswers(title, questionId, questionBody, sectionElement) {\n  questionCommentsSection.style.display = 'block';\n  allQuestionsSection.style.display = 'none';\n  userQuestionsSection.style.display = 'none';\n  addQuestion.style.display = 'none';\n  \n  // PODGE & Meggin\n  document.getElementById('questiontitle-holder').value = title;\n  document.getElementById('questiontitle-holder').innerText = title;\n  document.getElementById('questionid-holder').value = questionId;\n  document.getElementById('questionid-holder').innerText = questionId;\n  document.getElementById('questiontext-holder').value = questionBody;\n  document.getElementById('questiontext-holder').innerText = questionBody;\n  loadAndDisplayAnswers(questionId);\n }\n\n// Bindings on load.\nwindow.addEventListener('load', function() {\n  // Bind Sign in button.\n  signInButton.addEventListener('click', function() {\n    var provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n  });\n\n  // Bind Sign out button.\n  signOutButton.addEventListener('click', function() {\n    firebase.auth().signOut();\n  });\n\n  // Listen for auth state changes\n  firebase.auth().onAuthStateChanged(onAuthStateChanged);\n\n    // Saves answer on form submit.\n  answerForm.onsubmit = function(e) {\n    e.preventDefault();\n    var answer = answerInput.value;\n\n// PODGE\n    var questionId = document.getElementById('questionid-holder').value;\n    createNewAnswer(questionId, answer, firebase.auth().currentUser.displayName);\n    loadAndDisplayAnswers(questionId);\n    answerInput.value = '';\n  };\n\n  // Saves question on form submit.\n  questionForm.onsubmit = function(e) {\n    e.preventDefault();\n    var questionBody = questionDescriptionInput.value;\n    var title = questionTitleInput.value;\n    if (questionBody && title) {\n      newQuestionForCurrentUser(title, questionBody).then(function() {\n        myQuestionsMenuButton.click();\n      });\n      questionDescriptionInput.value = '';\n      questionTitleInput.value = '';\n    }\n  };\n\n  // Bind menu buttons.\n  questionsMenuButton.onclick = function() {\n    showSection(allQuestionsSection, questionsMenuButton);\n  };\n  myQuestionsMenuButton.onclick = function() {\n    showSection(userQuestionsSection, myQuestionsMenuButton);\n  };\n  addButton.onclick = function() {\n    showSection(addQuestion);\n    questionDescriptionInput.value = '';\n    questionTitleInput.value = '';\n  };\n  questionsMenuButton.onclick();\n\n}, false);\n\n})();\n"],"sourceRoot":"/source/"}